# voice_cloning.py
# Demonstra√ß√£o educacional de clonagem de voz com Tortoise-TTS

import torch
import torchaudio
import numpy as np
from tortoise.api import TextToSpeech
from tortoise.utils.audio import load_voice
import sounddevice as sd
import time
import warnings
warnings.filterwarnings("ignore")

class VoiceCloningDemo:
    def __init__(self):
        print("Inicializando sistema de clonagem de voz...")
        print("Isso pode levar alguns minutos na primeira execu√ß√£o...")
        
        # Inicializar o modelo TTS
        self.tts = TextToSpeech()
        
        # Texto para conscientiza√ß√£o sobre IA
        self.texto_conscientizacao = """
        Aten√ß√£o! Esta √© uma demonstra√ß√£o de como a intelig√™ncia artificial pode clonar vozes. 
        Tecnologias como esta representam avan√ßos incr√≠veis, mas tamb√©m trazem s√©rios riscos.
        Com apenas alguns segundos da sua voz, √© poss√≠vel criar √°udios falsos que soam exatamente como voc√™.
        Isso pode ser usado para golpes, desinforma√ß√£o e viola√ß√£o de privacidade.
        Esteja sempre ciente desses perigos e advogue por regulamenta√ß√µes √©ticas para o uso de IA.
        """
    
    def gravar_voz_referencia(self, duracao=10, taxa_amostragem=22050):
        """Grava uma amostra de voz para clonagem"""
        print(f"\nüé§ Grave sua voz por {duracao} segundos...")
        print("Preparando...")
        for i in range(3, 0, -1):
            print(f"{i}...")
            time.sleep(1)
        
        print("Fale agora!")
        
        # Gravar √°udio do microfone
        audio = sd.rec(int(duracao * taxa_amostragem), 
                      samplerate=taxa_amostragem, 
                      channels=1, 
                      dtype='float32')
        sd.wait()
        
        # Converter e salvar o √°udio
        audio_tensor = torch.from_numpy(audio.T)
        torchaudio.save("minha_voz.wav", audio_tensor, taxa_amostragem)
        print("‚úÖ Voz gravada com sucesso!")
        
        return "minha_voz.wav"
    
    def clonar_voz(self, arquivo_voz):
        """Clona a voz e gera a mensagem de conscientiza√ß√£o"""
        print("\nüîÑ Processando e clonando sua voz...")
        print("Isso pode levar v√°rios minutos...")
        
        # Carregar a voz de refer√™ncia
        amostras_voz, latentes = load_voice(arquivo_voz)
        
        # Gerar √°udio com a voz clonada
        audio_gerado = self.tts.tts_with_preset(
            self.texto_conscientizacao, 
            voice_samples=amostras_voz, 
            conditioning_latents=latentes,
            preset="standard"  # "standard", "high_quality", ou "ultra_fast"
        )
        
        # Salvar o √°udio gerado
        torchaudio.save("voz_clonada.wav", audio_gerado.squeeze(0).cpu(), 24000)
        print("‚úÖ Voz clonada com sucesso!")
        
        return audio_gerado
    
    def reproduzir_audio(self, audio_tensor, taxa_amostragem=24000):
        """Reproduz o √°udio gerado"""
        audio_numpy = audio_tensor.squeeze(0).cpu().numpy()
        print("\nüîä Reproduzindo mensagem com sua voz clonada...")
        sd.play(audio_numpy, samplerate=taxa_amostragem)
        sd.wait()
    
    def demonstrar_perigos_ia(self):
        """Demonstra√ß√£o completa"""
        print("="*65)
        print("DEMONSTRA√á√ÉO DE CLONAGEM DE VOZ COM IA")
        print("="*65)
        
        # Gravar voz
        arquivo_voz = self.gravar_voz_referencia(duracao=8)
        
        # Clonar voz
        audio_clonado = self.clonar_voz(arquivo_voz)
        
        # Reproduzir resultado
        self.reproduzir_audio(audio_clonado)
        
        # Mensagem final
        print("\n" + "="*65)
        print("CONCLUS√ÉO E ALERTAS:")
        print("- IAs podem clonar vozes com precis√£o assustadora")
        print("- Sua identidade vocal pode ser roubada e utilizada")
        print("- Desconfie de √°udios suspeitos, mesmo que soem reais")
        print("- Exija verifica√ß√£o em m√∫ltiplos canais para assuntos importantes")
        print("="*65)

if __name__ == "__main__":
    # Verificar se h√° GPU dispon√≠vel
    if torch.cuda.is_available():
        print("‚úÖ GPU detectada - processamento acelerado")
        device = "cuda"
    else:
        print("‚ö†Ô∏è  Usando CPU - processamento ser√° mais lento")
        device = "cpu"
    
    # Executar demonstra√ß√£o
    try:
        demo = VoiceCloningDemo()
        demo.demonstrar_perigos_ia()
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")
        print("Verifique se todas as depend√™ncias foram instaladas corretamente")